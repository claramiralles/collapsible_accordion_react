{"version":3,"sources":["components/Collapsible.js","App.js","index.js"],"names":["Collapsible","_this$props","this","props","id","cidState","action","name","tv","react_default","a","createElement","className","concat","onClick","data-id","Component","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","data","version","palettes","from","colors","cid","handleCollapsible","bind","assertThisInitialized","event","newCid","currentTarget","getAttribute","setState","prevState","_this2","map","item","index","components_Collapsible","key","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"gOAkBeA,mLAfF,IAAAC,EACoCC,KAAKC,MAAvCC,EADFH,EACEG,GAAIC,EADNJ,EACMI,SAAUC,EADhBL,EACgBK,OAAQC,EADxBN,EACwBM,KAAMC,EAD9BP,EAC8BO,GACnC,OACIC,EAAAC,EAAAC,cAAA,WAASC,UAAS,eAAAC,OAAiBR,IAAaD,EAAI,oBAAoB,IAAMA,GAAIA,GAC9EK,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBAAuBE,QAASR,EAAQS,UAASX,GAC5DK,EAAAC,EAAAC,cAAA,MAAIC,UAAU,sBAAd,IAAqCL,IAEzCE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACXH,EAAAC,EAAAC,cAAA,aAAKH,YATCQ,aCgHXC,qBA7Gb,SAAAA,EAAad,GAAM,IAAAe,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAjB,KAAAe,IACjBC,EAAAC,OAAAE,EAAA,EAAAF,CAAAjB,KAAAiB,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAArB,KAAMC,KAEDqB,MAAM,CACTC,KAAM,CACJC,QAAW,SACXC,SAAY,CACV,CACEpB,KAAQ,cACRqB,KAAQ,aACRC,OAAU,CACR,SACA,SACA,SACA,SACA,WAGJ,CACEtB,KAAQ,mBACRqB,KAAQ,YACRC,OAAU,CACR,SACA,SACA,SACA,SACA,WAGJ,CACEtB,KAAQ,uBACRqB,KAAQ,uBACRC,OAAU,CACR,SACA,SACA,SACA,SACA,WAGJ,CACEtB,KAAQ,WACRqB,KAAQ,UACRC,OAAU,CACR,SACA,SACA,SACA,SACA,WAGJ,CACEtB,KAAQ,WACRqB,KAAQ,QACRC,OAAU,CACR,SACA,SACA,SACA,SACA,aAKRC,IAAK,IAEPZ,EAAKa,kBAAoBb,EAAKa,kBAAkBC,KAAvBb,OAAAc,EAAA,EAAAd,CAAAD,IAlERA,iFAsEDgB,GAEhB,IAAMC,EAASD,EAAME,cAAcC,aAAa,WAEhDnC,KAAKoC,SAAS,SAAAC,GACZ,OAAIJ,IAAWI,EAAUT,IAChB,CACLA,IAAK,MAGA,CACLA,IAAKK,sCAMJ,IAAAK,EAAAtC,KAEP,OACEO,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAEdV,KAAKsB,MAAMC,KAAKE,SAASc,IAAI,SAACC,EAAMC,GAAP,OAAiBlC,EAAAC,EAAAC,cAAA,UAE7CF,EAAAC,EAAAC,cAACiC,EAAD,CACExC,GAAE,KAAAS,OAAS8B,GACXE,IAAG,KAAAhC,OAAS8B,GACZpC,KAAQmC,EAAKnC,KACbC,GAAMkC,EAAKd,KACXvB,SAAYmC,EAAKhB,MAAMM,IACvBxB,OAAUkC,EAAKT,+BArGPf,cCClB8B,IAASC,OAAOtC,EAAAC,EAAAC,cAACqC,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.9f64afd8.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nclass Collapsible extends Component {\n    render() {\n        const {id, cidState, action, name, tv} = this.props\n        return (\n            <section className={`collapsible ${cidState === id ?'collapsible--open':''}`} id={id}>\n                <div className=\"collapsible__trigger\" onClick={action} data-id={id}>\n                    <h2 className=\"collapsible__title\"> {name}</h2>\n                </div>\n                <div className=\"collapsible__panel\">\n                    <p> {tv}</p>\n                </div>\n            </section>\n        )\n    }\n}\n\nexport default Collapsible;\n","import React, {Component} from 'react';\nimport Collapsible from './components/Collapsible'\nimport './App.scss';\n\nclass App extends Component {\n  constructor (props){\n    super(props)\n\n    this.state={\n      data: {\n        \"version\": \"v0.0.0\",\n        \"palettes\": [\n          {\n            \"name\": \"Tardis Blue\",\n            \"from\": \"Doctor Who\",\n            \"colors\": [\n              \"003A6E\",\n              \"9B9A99\",\n              \"000000\",\n              \"FFFFFF\",\n              \"6F4500\"\n            ]\n          },\n          {\n            \"name\": \"Millenium Falcon\",\n            \"from\": \"Star Wars\",\n            \"colors\": [\n              \"B6B6BE\",\n              \"D8D7D4\",\n              \"413A31\",\n              \"746C66\",\n              \"A32D2C\"\n            ]\n          },\n          {\n            \"name\": \"Battlestar Galactica\",\n            \"from\": \"Battlestar Galactica\",\n            \"colors\": [\n              \"080F19\",\n              \"1B2E3F\",\n              \"364269\",\n              \"3D6973\",\n              \"E5635F\"\n            ]\n          },\n          {\n            \"name\": \"Serenity\",\n            \"from\": \"Firefly\",\n            \"colors\": [\n              \"3C5375\",\n              \"7285A6\",\n              \"96AABF\",\n              \"F1DB7E\",\n              \"0C0C0C\"\n            ]\n          },\n          {\n            \"name\": \"Nostromo\",\n            \"from\": \"Alien\",\n            \"colors\": [\n              \"08070C\",\n              \"F4F3F5\",\n              \"121828\",\n              \"464F75\",\n              \"9ABEF2\"\n            ]\n          }\n        ]\n      },\n      cid: \"\"\n    }\n    this.handleCollapsible = this.handleCollapsible.bind(this);\n  }\n\n\n  handleCollapsible(event){\n  \n    const newCid = event.currentTarget.getAttribute('data-id');\n\n    this.setState(prevState =>{\n      if (newCid === prevState.cid) {\n        return {\n          cid: null\n        }\n      } else {\n        return {\n          cid: newCid\n        }\n      }\n    });\n  }\n\n  render() {\n\n    return (\n      <div className=\"App\">\n\n      {this.state.data.palettes.map((item, index) => <li>\n\n        <Collapsible \n          id = {`c0${index}`}\n          key = {`c0${index}`}\n          name = {item.name}\n          tv = {item.from}\n          cidState = {this.state.cid}\n          action = {this.handleCollapsible}\n        />\n\n      </li>)}\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n\n//Cuando tenemos qu ehaccer ago en react, que tengo que repintar, que hacer algo en la pantalla: eso huele a estado\n\n//Vamos a crear el estado, que es un atributo especial de cada clase y por tanto se crea en el constructor (de la clase del componente madre)\n\n//el estado siempre es un objeto\n\n//para que sea visibe o no me basta con un booleano\n\n//como voy a empezar con el oculto, le voy a poner un booleano\n\n//si la propiedad esta en verdadero ponme esta clase, si no no\n\n//vamos a hacer una interpolacion de cadenas y con un ternario le diremos si es verdadrp ponme una clase y si es falso no\n\n//Siempre que hagamos cosas que dependen de un estado anterior nod eberiamos usar este sistema\n\n//Deberiamos pasarle al this.setSttate una funcion que devuelva un objeto y entonces esta funcion ya si puede coger el estado anterior, prevState\n\n//Asi React gestiona bien todos los cambios, llamando en setState a prevstate, porque puede que haya dos cambios de estado a la vez y perdamos uno de ellos, ya que el setState tarda un poquito, asi lo controla React\n\n//Ell setState siempre necesita un obejto, pode,os tener un objeto a capon como teniamos antes, una varibale que tiene un objeto o una funcion que devuelva un objeto. Y le vamos a decir que el tenga el objeto, solo que ya React controla esto, no va a haber posibilidad de que lo perdamos.\n\n//Si creamos ya dos colapasables se abren y cierran ambos a la vez. Esto ocurre porque ya no podemos tener simplemente una clave en el estado que sea isVisible true o false, ahora tenemos que decirlo en que colapsable se ha clicado.\n\n//Los acordeones funcionan que todos pueden estar cerrados pero solo uno peude estar abierto. por tanto neesitamos dos valore: q para cuando todos esten cerrados y otro para cuando uno este abierto. Vamos a tirar de ID.\n\n//Necesito tener un valor concreto para cuando todo este cerrado y un valor concreto que me diga cual esta abierto. Les pongo id c01 y c02 y nos olvidamos del booleano. Ahora ponemos la clave cid\n\n//Comprobamos a mano que funciona: le decimos al objeto this.state que tenga la clave cid: c02 y ahora en nuestro booleano cambiamos el anterior isVisible===true por cid===c01 para la seccion 1 y cid===02 para la seccion 2. Vamos al inspector de React y probamos a mano, vemos que funciona. Ahora, ya seguros de que funciona, vamos a hacer que las clases se cambien con programacion desde react en vez de a mano.\n\n//Para ello necesitamos tener acceso al id de section, por lo que creamos un atributo en el div colapsible que sea data-id=c01 y data-id=c02. Ahora ya vouy a poder acceder a ese valor.\n\n//Ahora cojo mi funcion y ahor ay si que necesito el evento, para poder acceder a la criatura.\n//Le digo a la funcion que del evento coja el currentTarget y su atributo data-id y lo guardo en una constante newCid. Ahora llamo a setState y le digo que el objeto ahora a a ser igual a cid: newCid. Asi me funciona, si clicko en un colapsable se abre y se cierra el otro y viceversa. Pero as√≠ nunca puedo tener los dos colapsables cerrados.\n\n//Para conseguir tener los dos colapsables tambien cerrados a la vez voy a hacer un condicional: si hago click en el mismo elemento, cierramelo, si hago click en otro elemento, abreme ese elemento\n\n//Si el prevState.cid es igual al newCid, dame null en el cid y si no, el cid debe ser igual al newCid.\n\n//Ahora ya funcionan dos. Una vez que funcionan, vamos a indentar, quitamos los espacios extra y hacemos componentes\n\n\n//Ahora que ya tenemos los dos componentes funcionando y solo ahora, vamos a coger las paletas\n\n\n\n//para ccomprobar que funciona voy a mapear this.state.data.palette, que es nuestro array\n\n//Ahora que ya vemos que nos lo pinta, lo vamos a hacer ya bonito. Voy a convertir mi array de palteas en un array de colapsabels, apsandole el componente qcolapsabel qeu ya tengo hecho. ahora admeas le tengo que pasar el nombre y la serie de tv\n\n//Asi me hace cinco coapsables con el c01 cada una. Para solucionarlo vamos a ponerle un id a cada uno, para ello vamos a usar el index del map. Y aqui nos vamso a hacer una interpolacion de cadenas","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}